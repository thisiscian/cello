#include<cello/frame.h>
using namespace cello;
using namespace std;

namespace cello {
	float frameSep=0.1;
	int width=100;
	int height=100;
	int maxPaletteSize=256;
	bool checkFileExists=false;
	GifColorType defaultPalette[768] = {
		0x0, 0x0, 0x0, 
		0x0, 0x0, 0x1C, 
		0x0, 0x0, 0x38, 
		0x0, 0x0, 0x55, 
		0x0, 0x0, 0x71, 
		0x0, 0x0, 0x8E, 
		0x0, 0x0, 0xAA, 
		0x0, 0x0, 0xC7, 
		0x0, 0x0, 0xE3, 
		0x0, 0x1C, 0x0, 
		0x0, 0x1C, 0x1C, 
		0x0, 0x1C, 0x38, 
		0x0, 0x1C, 0x55, 
		0x0, 0x1C, 0x71, 
		0x0, 0x1C, 0x8E, 
		0x0, 0x1C, 0xAA, 
		0x0, 0x1C, 0xC7, 
		0x0, 0x1C, 0xE3, 
		0x0, 0x38, 0x0, 
		0x0, 0x38, 0x1C, 
		0x0, 0x38, 0x38, 
		0x0, 0x38, 0x55, 
		0x0, 0x38, 0x71, 
		0x0, 0x38, 0x8E, 
		0x0, 0x38, 0xAA, 
		0x0, 0x38, 0xC7, 
		0x0, 0x38, 0xE3, 
		0x0, 0x55, 0x0, 
		0x0, 0x55, 0x1C, 
		0x0, 0x55, 0x38, 
		0x0, 0x55, 0x55, 
		0x0, 0x55, 0x71, 
		0x0, 0x55, 0x8E, 
		0x0, 0x55, 0xAA, 
		0x0, 0x55, 0xC7, 
		0x0, 0x55, 0xE3, 
		0x0, 0x71, 0x0, 
		0x0, 0x71, 0x1C, 
		0x0, 0x71, 0x38, 
		0x0, 0x71, 0x55, 
		0x0, 0x71, 0x71, 
		0x0, 0x71, 0x8E, 
		0x0, 0x71, 0xAA, 
		0x0, 0x71, 0xC7, 
		0x0, 0x71, 0xE3, 
		0x0, 0x8E, 0x0, 
		0x0, 0x8E, 0x1C, 
		0x0, 0x8E, 0x38, 
		0x0, 0x8E, 0x55, 
		0x0, 0x8E, 0x71, 
		0x0, 0x8E, 0x8E, 
		0x0, 0x8E, 0xAA, 
		0x0, 0x8E, 0xC7, 
		0x0, 0x8E, 0xE3, 
		0x0, 0xAA, 0x0, 
		0x0, 0xAA, 0x1C, 
		0x0, 0xAA, 0x38, 
		0x0, 0xAA, 0x55, 
		0x0, 0xAA, 0x71, 
		0x0, 0xAA, 0x8E, 
		0x0, 0xAA, 0xAA, 
		0x0, 0xAA, 0xC7, 
		0x0, 0xAA, 0xE3, 
		0x0, 0xC7, 0x0, 
		0x0, 0xC7, 0x1C, 
		0x0, 0xC7, 0x38, 
		0x0, 0xC7, 0x55, 
		0x0, 0xC7, 0x71, 
		0x0, 0xC7, 0x8E, 
		0x0, 0xC7, 0xAA, 
		0x0, 0xC7, 0xC7, 
		0x0, 0xC7, 0xE3, 
		0x0, 0xE3, 0x0, 
		0x0, 0xE3, 0x1C, 
		0x0, 0xE3, 0x38, 
		0x0, 0xE3, 0x55, 
		0x0, 0xE3, 0x71, 
		0x0, 0xE3, 0x8E, 
		0x0, 0xE3, 0xAA, 
		0x0, 0xE3, 0xC7, 
		0x0, 0xE3, 0xE3, 
		0x1C, 0x0, 0x0, 
		0x1C, 0x0, 0x1C, 
		0x1C, 0x0, 0x38, 
		0x1C, 0x0, 0x55, 
		0x1C, 0x0, 0x71, 
		0x1C, 0x0, 0x8E, 
		0x1C, 0x0, 0xAA, 
		0x1C, 0x0, 0xC7, 
		0x1C, 0x0, 0xE3, 
		0x1C, 0x1C, 0x0, 
		0x1C, 0x1C, 0x1C, 
		0x1C, 0x1C, 0x38, 
		0x1C, 0x1C, 0x55, 
		0x1C, 0x1C, 0x71, 
		0x1C, 0x1C, 0x8E, 
		0x1C, 0x1C, 0xAA, 
		0x1C, 0x1C, 0xC7, 
		0x1C, 0x1C, 0xE3, 
		0x1C, 0x38, 0x0, 
		0x1C, 0x38, 0x1C, 
		0x1C, 0x38, 0x38, 
		0x1C, 0x38, 0x55, 
		0x1C, 0x38, 0x71, 
		0x1C, 0x38, 0x8E, 
		0x1C, 0x38, 0xAA, 
		0x1C, 0x38, 0xC7, 
		0x1C, 0x38, 0xE3, 
		0x1C, 0x55, 0x0, 
		0x1C, 0x55, 0x1C, 
		0x1C, 0x55, 0x38, 
		0x1C, 0x55, 0x55, 
		0x1C, 0x55, 0x71, 
		0x1C, 0x55, 0x8E, 
		0x1C, 0x55, 0xAA, 
		0x1C, 0x55, 0xC7, 
		0x1C, 0x55, 0xE3, 
		0x1C, 0x71, 0x0, 
		0x1C, 0x71, 0x1C, 
		0x1C, 0x71, 0x38, 
		0x1C, 0x71, 0x55, 
		0x1C, 0x71, 0x71, 
		0x1C, 0x71, 0x8E, 
		0x1C, 0x71, 0xAA, 
		0x1C, 0x71, 0xC7, 
		0x1C, 0x71, 0xE3, 
		0x1C, 0x8E, 0x0, 
		0x1C, 0x8E, 0x1C, 
		0x1C, 0x8E, 0x38, 
		0x1C, 0x8E, 0x55, 
		0x1C, 0x8E, 0x71, 
		0x1C, 0x8E, 0x8E, 
		0x1C, 0x8E, 0xAA, 
		0x1C, 0x8E, 0xC7, 
		0x1C, 0x8E, 0xE3, 
		0x1C, 0xAA, 0x0, 
		0x1C, 0xAA, 0x1C, 
		0x1C, 0xAA, 0x38, 
		0x1C, 0xAA, 0x55, 
		0x1C, 0xAA, 0x71, 
		0x1C, 0xAA, 0x8E, 
		0x1C, 0xAA, 0xAA, 
		0x1C, 0xAA, 0xC7, 
		0x1C, 0xAA, 0xE3, 
		0x1C, 0xC7, 0x0, 
		0x1C, 0xC7, 0x1C, 
		0x1C, 0xC7, 0x38, 
		0x1C, 0xC7, 0x55, 
		0x1C, 0xC7, 0x71, 
		0x1C, 0xC7, 0x8E, 
		0x1C, 0xC7, 0xAA, 
		0x1C, 0xC7, 0xC7, 
		0x1C, 0xC7, 0xE3, 
		0x1C, 0xE3, 0x0, 
		0x1C, 0xE3, 0x1C, 
		0x1C, 0xE3, 0x38, 
		0x1C, 0xE3, 0x55, 
		0x1C, 0xE3, 0x71, 
		0x1C, 0xE3, 0x8E, 
		0x1C, 0xE3, 0xAA, 
		0x1C, 0xE3, 0xC7, 
		0x1C, 0xE3, 0xE3, 
		0x38, 0x0, 0x0, 
		0x38, 0x0, 0x1C, 
		0x38, 0x0, 0x38, 
		0x38, 0x0, 0x55, 
		0x38, 0x0, 0x71, 
		0x38, 0x0, 0x8E, 
		0x38, 0x0, 0xAA, 
		0x38, 0x0, 0xC7, 
		0x38, 0x0, 0xE3, 
		0x38, 0x1C, 0x0, 
		0x38, 0x1C, 0x1C, 
		0x38, 0x1C, 0x38, 
		0x38, 0x1C, 0x55, 
		0x38, 0x1C, 0x71, 
		0x38, 0x1C, 0x8E, 
		0x38, 0x1C, 0xAA, 
		0x38, 0x1C, 0xC7, 
		0x38, 0x1C, 0xE3, 
		0x38, 0x38, 0x0, 
		0x38, 0x38, 0x1C, 
		0x38, 0x38, 0x38, 
		0x38, 0x38, 0x55, 
		0x38, 0x38, 0x71, 
		0x38, 0x38, 0x8E, 
		0x38, 0x38, 0xAA, 
		0x38, 0x38, 0xC7, 
		0x38, 0x38, 0xE3, 
		0x38, 0x55, 0x0, 
		0x38, 0x55, 0x1C, 
		0x38, 0x55, 0x38, 
		0x38, 0x55, 0x55, 
		0x38, 0x55, 0x71, 
		0x38, 0x55, 0x8E, 
		0x38, 0x55, 0xAA, 
		0x38, 0x55, 0xC7, 
		0x38, 0x55, 0xE3, 
		0x38, 0x71, 0x0, 
		0x38, 0x71, 0x1C, 
		0x38, 0x71, 0x38, 
		0x38, 0x71, 0x55, 
		0x38, 0x71, 0x71, 
		0x38, 0x71, 0x8E, 
		0x38, 0x71, 0xAA, 
		0x38, 0x71, 0xC7, 
		0x38, 0x71, 0xE3, 
		0x38, 0x8E, 0x0, 
		0x38, 0x8E, 0x1C, 
		0x38, 0x8E, 0x38, 
		0x38, 0x8E, 0x55, 
		0x38, 0x8E, 0x71, 
		0x38, 0x8E, 0x8E, 
		0x38, 0x8E, 0xAA, 
		0x38, 0x8E, 0xC7, 
		0x38, 0x8E, 0xE3, 
		0x38, 0xAA, 0x0, 
		0x38, 0xAA, 0x1C, 
		0x38, 0xAA, 0x38, 
		0x38, 0xAA, 0x55, 
		0x38, 0xAA, 0x71, 
		0x38, 0xAA, 0x8E, 
		0x38, 0xAA, 0xAA, 
		0x38, 0xAA, 0xC7, 
		0x38, 0xAA, 0xE3, 
		0x38, 0xC7, 0x0, 
		0x38, 0xC7, 0x1C, 
		0x38, 0xC7, 0x38, 
		0x38, 0xC7, 0x55, 
		0x38, 0xC7, 0x71, 
		0x38, 0xC7, 0x8E, 
		0x38, 0xC7, 0xAA, 
		0x38, 0xC7, 0xC7, 
		0x38, 0xC7, 0xE3, 
		0x38, 0xE3, 0x0, 
		0x38, 0xE3, 0x1C, 
		0x38, 0xE3, 0x38, 
		0x38, 0xE3, 0x55, 
		0x38, 0xE3, 0x71, 
		0x38, 0xE3, 0x8E, 
		0x38, 0xE3, 0xAA, 
		0x38, 0xE3, 0xC7, 
		0x38, 0xE3, 0xE3, 
		0x55, 0x0, 0x0, 
		0x55, 0x0, 0x1C, 
		0x55, 0x0, 0x38, 
		0x55, 0x0, 0x55, 
		0x55, 0x0, 0x71, 
		0x55, 0x0, 0x8E, 
		0x55, 0x0, 0xAA, 
		0x55, 0x0, 0xC7, 
		0x55, 0x0, 0xE3, 
		0x55, 0x1C, 0x0, 
		0x55, 0x1C, 0x1C, 
		0x55, 0x1C, 0x38, 
		0x55, 0x1C, 0x55, 
		0x55, 0x1C, 0x71, 
		0x55, 0x1C, 0x8E, 
		0x55, 0x1C, 0xAA, 
		0x55, 0x1C, 0xC7, 
		0x55, 0x1C, 0xE3, 
		0x55, 0x38, 0x0, 
		0x55, 0x38, 0x1C, 
		0x55, 0x38, 0x38, 
		0x55, 0x38, 0x55, 
		0x55, 0x38, 0x71, 
		0x55, 0x38, 0x8E, 
		0x55, 0x38, 0xAA, 
		0x55, 0x38, 0xC7, 
		0x55, 0x38, 0xE3, 
		0x55, 0x55, 0x0, 
		0x55, 0x55, 0x1C, 
		0x55, 0x55, 0x38, 
		0x55, 0x55, 0x55, 
		0x55, 0x55, 0x71, 
		0x55, 0x55, 0x8E, 
		0x55, 0x55, 0xAA, 
		0x55, 0x55, 0xC7, 
		0x55, 0x55, 0xE3, 
		0x55, 0x71, 0x0, 
		0x55, 0x71, 0x1C, 
		0x55, 0x71, 0x38, 
		0x55, 0x71, 0x55, 
		0x55, 0x71, 0x71, 
		0x55, 0x71, 0x8E, 
		0x55, 0x71, 0xAA, 
		0x55, 0x71, 0xC7, 
		0x55, 0x71, 0xE3, 
		0x55, 0x8E, 0x0, 
		0x55, 0x8E, 0x1C, 
		0x55, 0x8E, 0x38, 
		0x55, 0x8E, 0x55, 
		0x55, 0x8E, 0x71, 
		0x55, 0x8E, 0x8E, 
		0x55, 0x8E, 0xAA, 
		0x55, 0x8E, 0xC7, 
		0x55, 0x8E, 0xE3, 
		0x55, 0xAA, 0x0, 
		0x55, 0xAA, 0x1C, 
		0x55, 0xAA, 0x38, 
		0x55, 0xAA, 0x55, 
		0x55, 0xAA, 0x71, 
		0x55, 0xAA, 0x8E, 
		0x55, 0xAA, 0xAA, 
		0x55, 0xAA, 0xC7, 
		0x55, 0xAA, 0xE3, 
		0x55, 0xC7, 0x0, 
		0x55, 0xC7, 0x1C, 
		0x55, 0xC7, 0x38, 
		0x55, 0xC7, 0x55, 
		0x55, 0xC7, 0x71, 
		0x55, 0xC7, 0x8E, 
		0x55, 0xC7, 0xAA, 
		0x55, 0xC7, 0xC7, 
		0x55, 0xC7, 0xE3, 
		0x55, 0xE3, 0x0, 
		0x55, 0xE3, 0x1C, 
		0x55, 0xE3, 0x38, 
		0x55, 0xE3, 0x55, 
		0x55, 0xE3, 0x71, 
		0x55, 0xE3, 0x8E, 
		0x55, 0xE3, 0xAA, 
		0x55, 0xE3, 0xC7, 
		0x55, 0xE3, 0xE3, 
		0x71, 0x0, 0x0, 
		0x71, 0x0, 0x1C, 
		0x71, 0x0, 0x38, 
		0x71, 0x0, 0x55, 
		0x71, 0x0, 0x71, 
		0x71, 0x0, 0x8E, 
		0x71, 0x0, 0xAA, 
		0x71, 0x0, 0xC7, 
		0x71, 0x0, 0xE3, 
		0x71, 0x1C, 0x0, 
		0x71, 0x1C, 0x1C, 
		0x71, 0x1C, 0x38, 
		0x71, 0x1C, 0x55, 
		0x71, 0x1C, 0x71, 
		0x71, 0x1C, 0x8E, 
		0x71, 0x1C, 0xAA, 
		0x71, 0x1C, 0xC7, 
		0x71, 0x1C, 0xE3, 
		0x71, 0x38, 0x0, 
		0x71, 0x38, 0x1C, 
		0x71, 0x38, 0x38, 
		0x71, 0x38, 0x55, 
		0x71, 0x38, 0x71, 
		0x71, 0x38, 0x8E, 
		0x71, 0x38, 0xAA, 
		0x71, 0x38, 0xC7, 
		0x71, 0x38, 0xE3, 
		0x71, 0x55, 0x0, 
		0x71, 0x55, 0x1C, 
		0x71, 0x55, 0x38, 
		0x71, 0x55, 0x55, 
		0x71, 0x55, 0x71, 
		0x71, 0x55, 0x8E, 
		0x71, 0x55, 0xAA, 
		0x71, 0x55, 0xC7, 
		0x71, 0x55, 0xE3, 
		0x71, 0x71, 0x0, 
		0x71, 0x71, 0x1C, 
		0x71, 0x71, 0x38, 
		0x71, 0x71, 0x55, 
		0x71, 0x71, 0x71, 
		0x71, 0x71, 0x8E, 
		0x71, 0x71, 0xAA, 
		0x71, 0x71, 0xC7, 
		0x71, 0x71, 0xE3, 
		0x71, 0x8E, 0x0, 
		0x71, 0x8E, 0x1C, 
		0x71, 0x8E, 0x38, 
		0x71, 0x8E, 0x55, 
		0x71, 0x8E, 0x71, 
		0x71, 0x8E, 0x8E, 
		0x71, 0x8E, 0xAA, 
		0x71, 0x8E, 0xC7, 
		0x71, 0x8E, 0xE3, 
		0x71, 0xAA, 0x0, 
		0x71, 0xAA, 0x1C, 
		0x71, 0xAA, 0x38, 
		0x71, 0xAA, 0x55, 
		0x71, 0xAA, 0x71, 
		0x71, 0xAA, 0x8E, 
		0x71, 0xAA, 0xAA, 
		0x71, 0xAA, 0xC7, 
		0x71, 0xAA, 0xE3, 
		0x71, 0xC7, 0x0, 
		0x71, 0xC7, 0x1C, 
		0x71, 0xC7, 0x38, 
		0x71, 0xC7, 0x55, 
		0x71, 0xC7, 0x71, 
		0x71, 0xC7, 0x8E, 
		0x71, 0xC7, 0xAA, 
		0x71, 0xC7, 0xC7, 
		0x71, 0xC7, 0xE3, 
		0x71, 0xE3, 0x0, 
		0x71, 0xE3, 0x1C, 
		0x71, 0xE3, 0x38, 
		0x71, 0xE3, 0x55, 
		0x71, 0xE3, 0x71, 
		0x71, 0xE3, 0x8E, 
		0x71, 0xE3, 0xAA, 
		0x71, 0xE3, 0xC7, 
		0x71, 0xE3, 0xE3, 
		0x8E, 0x0, 0x0, 
		0x8E, 0x0, 0x1C, 
		0x8E, 0x0, 0x38, 
		0x8E, 0x0, 0x55, 
		0x8E, 0x0, 0x71, 
		0x8E, 0x0, 0x8E, 
		0x8E, 0x0, 0xAA, 
		0x8E, 0x0, 0xC7, 
		0x8E, 0x0, 0xE3, 
		0x8E, 0x1C, 0x0, 
		0x8E, 0x1C, 0x1C, 
		0x8E, 0x1C, 0x38, 
		0x8E, 0x1C, 0x55, 
		0x8E, 0x1C, 0x71, 
		0x8E, 0x1C, 0x8E, 
		0x8E, 0x1C, 0xAA, 
		0x8E, 0x1C, 0xC7, 
		0x8E, 0x1C, 0xE3, 
		0x8E, 0x38, 0x0, 
		0x8E, 0x38, 0x1C, 
		0x8E, 0x38, 0x38, 
		0x8E, 0x38, 0x55, 
		0x8E, 0x38, 0x71, 
		0x8E, 0x38, 0x8E, 
		0x8E, 0x38, 0xAA, 
		0x8E, 0x38, 0xC7, 
		0x8E, 0x38, 0xE3, 
		0x8E, 0x55, 0x0, 
		0x8E, 0x55, 0x1C, 
		0x8E, 0x55, 0x38, 
		0x8E, 0x55, 0x55, 
		0x8E, 0x55, 0x71, 
		0x8E, 0x55, 0x8E, 
		0x8E, 0x55, 0xAA, 
		0x8E, 0x55, 0xC7, 
		0x8E, 0x55, 0xE3, 
		0x8E, 0x71, 0x0, 
		0x8E, 0x71, 0x1C, 
		0x8E, 0x71, 0x38, 
		0x8E, 0x71, 0x55, 
		0x8E, 0x71, 0x71, 
		0x8E, 0x71, 0x8E, 
		0x8E, 0x71, 0xAA, 
		0x8E, 0x71, 0xC7, 
		0x8E, 0x71, 0xE3, 
		0x8E, 0x8E, 0x0, 
		0x8E, 0x8E, 0x1C, 
		0x8E, 0x8E, 0x38, 
		0x8E, 0x8E, 0x55, 
		0x8E, 0x8E, 0x71, 
		0x8E, 0x8E, 0x8E, 
		0x8E, 0x8E, 0xAA, 
		0x8E, 0x8E, 0xC7, 
		0x8E, 0x8E, 0xE3, 
		0x8E, 0xAA, 0x0, 
		0x8E, 0xAA, 0x1C, 
		0x8E, 0xAA, 0x38, 
		0x8E, 0xAA, 0x55, 
		0x8E, 0xAA, 0x71, 
		0x8E, 0xAA, 0x8E, 
		0x8E, 0xAA, 0xAA, 
		0x8E, 0xAA, 0xC7, 
		0x8E, 0xAA, 0xE3, 
		0x8E, 0xC7, 0x0, 
		0x8E, 0xC7, 0x1C, 
		0x8E, 0xC7, 0x38, 
		0x8E, 0xC7, 0x55, 
		0x8E, 0xC7, 0x71, 
		0x8E, 0xC7, 0x8E, 
		0x8E, 0xC7, 0xAA, 
		0x8E, 0xC7, 0xC7, 
		0x8E, 0xC7, 0xE3, 
		0x8E, 0xE3, 0x0, 
		0x8E, 0xE3, 0x1C, 
		0x8E, 0xE3, 0x38, 
		0x8E, 0xE3, 0x55, 
		0x8E, 0xE3, 0x71, 
		0x8E, 0xE3, 0x8E, 
		0x8E, 0xE3, 0xAA, 
		0x8E, 0xE3, 0xC7, 
		0x8E, 0xE3, 0xE3, 
		0xAA, 0x0, 0x0, 
		0xAA, 0x0, 0x1C, 
		0xAA, 0x0, 0x38, 
		0xAA, 0x0, 0x55, 
		0xAA, 0x0, 0x71, 
		0xAA, 0x0, 0x8E, 
		0xAA, 0x0, 0xAA, 
		0xAA, 0x0, 0xC7, 
		0xAA, 0x0, 0xE3, 
		0xAA, 0x1C, 0x0, 
		0xAA, 0x1C, 0x1C, 
		0xAA, 0x1C, 0x38, 
		0xAA, 0x1C, 0x55, 
		0xAA, 0x1C, 0x71, 
		0xAA, 0x1C, 0x8E, 
		0xAA, 0x1C, 0xAA, 
		0xAA, 0x1C, 0xC7, 
		0xAA, 0x1C, 0xE3, 
		0xAA, 0x38, 0x0, 
		0xAA, 0x38, 0x1C, 
		0xAA, 0x38, 0x38, 
		0xAA, 0x38, 0x55, 
		0xAA, 0x38, 0x71, 
		0xAA, 0x38, 0x8E, 
		0xAA, 0x38, 0xAA, 
		0xAA, 0x38, 0xC7, 
		0xAA, 0x38, 0xE3, 
		0xAA, 0x55, 0x0, 
		0xAA, 0x55, 0x1C, 
		0xAA, 0x55, 0x38, 
		0xAA, 0x55, 0x55, 
		0xAA, 0x55, 0x71, 
		0xAA, 0x55, 0x8E, 
		0xAA, 0x55, 0xAA, 
		0xAA, 0x55, 0xC7, 
		0xAA, 0x55, 0xE3, 
		0xAA, 0x71, 0x0, 
		0xAA, 0x71, 0x1C, 
		0xAA, 0x71, 0x38, 
		0xAA, 0x71, 0x55, 
		0xAA, 0x71, 0x71, 
		0xAA, 0x71, 0x8E, 
		0xAA, 0x71, 0xAA, 
		0xAA, 0x71, 0xC7, 
		0xAA, 0x71, 0xE3, 
		0xAA, 0x8E, 0x0, 
		0xAA, 0x8E, 0x1C, 
		0xAA, 0x8E, 0x38, 
		0xAA, 0x8E, 0x55, 
		0xAA, 0x8E, 0x71, 
		0xAA, 0x8E, 0x8E, 
		0xAA, 0x8E, 0xAA, 
		0xAA, 0x8E, 0xC7, 
		0xAA, 0x8E, 0xE3, 
		0xAA, 0xAA, 0x0, 
		0xAA, 0xAA, 0x1C, 
		0xAA, 0xAA, 0x38, 
		0xAA, 0xAA, 0x55, 
		0xAA, 0xAA, 0x71, 
		0xAA, 0xAA, 0x8E, 
		0xAA, 0xAA, 0xAA, 
		0xAA, 0xAA, 0xC7, 
		0xAA, 0xAA, 0xE3, 
		0xAA, 0xC7, 0x0, 
		0xAA, 0xC7, 0x1C, 
		0xAA, 0xC7, 0x38, 
		0xAA, 0xC7, 0x55, 
		0xAA, 0xC7, 0x71, 
		0xAA, 0xC7, 0x8E, 
		0xAA, 0xC7, 0xAA, 
		0xAA, 0xC7, 0xC7, 
		0xAA, 0xC7, 0xE3, 
		0xAA, 0xE3, 0x0, 
		0xAA, 0xE3, 0x1C, 
		0xAA, 0xE3, 0x38, 
		0xAA, 0xE3, 0x55, 
		0xAA, 0xE3, 0x71, 
		0xAA, 0xE3, 0x8E, 
		0xAA, 0xE3, 0xAA, 
		0xAA, 0xE3, 0xC7, 
		0xAA, 0xE3, 0xE3, 
		0xC7, 0x0, 0x0, 
		0xC7, 0x0, 0x1C, 
		0xC7, 0x0, 0x38, 
		0xC7, 0x0, 0x55, 
		0xC7, 0x0, 0x71, 
		0xC7, 0x0, 0x8E, 
		0xC7, 0x0, 0xAA, 
		0xC7, 0x0, 0xC7, 
		0xC7, 0x0, 0xE3, 
		0xC7, 0x1C, 0x0, 
		0xC7, 0x1C, 0x1C, 
		0xC7, 0x1C, 0x38, 
		0xC7, 0x1C, 0x55, 
		0xC7, 0x1C, 0x71, 
		0xC7, 0x1C, 0x8E, 
		0xC7, 0x1C, 0xAA, 
		0xC7, 0x1C, 0xC7, 
		0xC7, 0x1C, 0xE3, 
		0xC7, 0x38, 0x0, 
		0xC7, 0x38, 0x1C, 
		0xC7, 0x38, 0x38, 
		0xC7, 0x38, 0x55, 
		0xC7, 0x38, 0x71, 
		0xC7, 0x38, 0x8E, 
		0xC7, 0x38, 0xAA, 
		0xC7, 0x38, 0xC7, 
		0xC7, 0x38, 0xE3, 
		0xC7, 0x55, 0x0, 
		0xC7, 0x55, 0x1C, 
		0xC7, 0x55, 0x38, 
		0xC7, 0x55, 0x55, 
		0xC7, 0x55, 0x71, 
		0xC7, 0x55, 0x8E, 
		0xC7, 0x55, 0xAA, 
		0xC7, 0x55, 0xC7, 
		0xC7, 0x55, 0xE3, 
		0xC7, 0x71, 0x0, 
		0xC7, 0x71, 0x1C, 
		0xC7, 0x71, 0x38, 
		0xC7, 0x71, 0x55, 
		0xC7, 0x71, 0x71, 
		0xC7, 0x71, 0x8E, 
		0xC7, 0x71, 0xAA, 
		0xC7, 0x71, 0xC7, 
		0xC7, 0x71, 0xE3, 
		0xC7, 0x8E, 0x0, 
		0xC7, 0x8E, 0x1C, 
		0xC7, 0x8E, 0x38, 
		0xC7, 0x8E, 0x55, 
		0xC7, 0x8E, 0x71, 
		0xC7, 0x8E, 0x8E, 
		0xC7, 0x8E, 0xAA, 
		0xC7, 0x8E, 0xC7, 
		0xC7, 0x8E, 0xE3, 
		0xC7, 0xAA, 0x0, 
		0xC7, 0xAA, 0x1C, 
		0xC7, 0xAA, 0x38, 
		0xC7, 0xAA, 0x55, 
		0xC7, 0xAA, 0x71, 
		0xC7, 0xAA, 0x8E, 
		0xC7, 0xAA, 0xAA, 
		0xC7, 0xAA, 0xC7, 
		0xC7, 0xAA, 0xE3, 
		0xC7, 0xC7, 0x0, 
		0xC7, 0xC7, 0x1C, 
		0xC7, 0xC7, 0x38, 
		0xC7, 0xC7, 0x55, 
		0xC7, 0xC7, 0x71, 
		0xC7, 0xC7, 0x8E, 
		0xC7, 0xC7, 0xAA, 
		0xC7, 0xC7, 0xC7, 
		0xC7, 0xC7, 0xE3, 
		0xC7, 0xE3, 0x0, 
		0xC7, 0xE3, 0x1C, 
		0xC7, 0xE3, 0x38, 
		0xC7, 0xE3, 0x55, 
		0xC7, 0xE3, 0x71, 
		0xC7, 0xE3, 0x8E, 
		0xC7, 0xE3, 0xAA, 
		0xC7, 0xE3, 0xC7, 
		0xC7, 0xE3, 0xE3, 
		0xE3, 0x0, 0x0, 
		0xE3, 0x0, 0x1C, 
		0xE3, 0x0, 0x38, 
		0xE3, 0x0, 0x55, 
		0xE3, 0x0, 0x71, 
		0xE3, 0x0, 0x8E, 
		0xE3, 0x0, 0xAA, 
		0xE3, 0x0, 0xC7, 
		0xE3, 0x0, 0xE3, 
		0xE3, 0x1C, 0x0, 
		0xE3, 0x1C, 0x1C, 
		0xE3, 0x1C, 0x38, 
		0xE3, 0x1C, 0x55, 
		0xE3, 0x1C, 0x71, 
		0xE3, 0x1C, 0x8E, 
		0xE3, 0x1C, 0xAA, 
		0xE3, 0x1C, 0xC7, 
		0xE3, 0x1C, 0xE3, 
		0xE3, 0x38, 0x0, 
		0xE3, 0x38, 0x1C, 
		0xE3, 0x38, 0x38, 
		0xE3, 0x38, 0x55, 
		0xE3, 0x38, 0x71, 
		0xE3, 0x38, 0x8E, 
		0xE3, 0x38, 0xAA, 
		0xE3, 0x38, 0xC7, 
		0xE3, 0x38, 0xE3, 
		0xE3, 0x55, 0x0, 
		0xE3, 0x55, 0x1C, 
		0xE3, 0x55, 0x38, 
		0xE3, 0x55, 0x55, 
		0xE3, 0x55, 0x71, 
		0xE3, 0x55, 0x8E, 
		0xE3, 0x55, 0xAA, 
		0xE3, 0x55, 0xC7, 
		0xE3, 0x55, 0xE3, 
		0xE3, 0x71, 0x0, 
		0xE3, 0x71, 0x1C, 
		0xE3, 0x71, 0x38, 
		0xE3, 0x71, 0x55, 
		0xE3, 0x71, 0x71, 
		0xE3, 0x71, 0x8E, 
		0xE3, 0x71, 0xAA, 
		0xE3, 0x71, 0xC7, 
		0xE3, 0x71, 0xE3, 
		0xE3, 0x8E, 0x0, 
		0xE3, 0x8E, 0x1C, 
		0xE3, 0x8E, 0x38, 
		0xE3, 0x8E, 0x55, 
		0xE3, 0x8E, 0x71, 
		0xE3, 0x8E, 0x8E, 
		0xE3, 0x8E, 0xAA, 
		0xE3, 0x8E, 0xC7, 
		0xE3, 0x8E, 0xE3, 
		0xE3, 0xAA, 0x0, 
		0xE3, 0xAA, 0x1C, 
		0xE3, 0xAA, 0x38, 
		0xE3, 0xAA, 0x55, 
		0xE3, 0xAA, 0x71, 
		0xE3, 0xAA, 0x8E, 
		0xE3, 0xAA, 0xAA, 
		0xE3, 0xAA, 0xC7, 
		0xE3, 0xAA, 0xE3, 
		0xE3, 0xC7, 0x0, 
		0xE3, 0xC7, 0x1C, 
		0xE3, 0xC7, 0x38, 
		0xE3, 0xC7, 0x55, 
		0xE3, 0xC7, 0x71, 
		0xE3, 0xC7, 0x8E, 
		0xE3, 0xC7, 0xAA, 
		0xE3, 0xC7, 0xC7, 
		0xE3, 0xC7, 0xE3, 
		0xE3, 0xE3, 0x0, 
		0xE3, 0xE3, 0x1C, 
		0xE3, 0xE3, 0x38, 
		0xE3, 0xE3, 0x55, 
		0xE3, 0xE3, 0x71, 
		0xE3, 0xE3, 0x8E, 
		0xE3, 0xE3, 0xAA, 
		0xE3, 0xE3, 0xC7, 
		0xE3, 0xE3, 0xE3 
	};
}

void cello::size(int squareWidth) { width=squareWidth; height=squareWidth; }
void cello::size(int w, int h) { width=w; height=h; }
GifColorType* cello::getPalette(Frame &f) {
	int size=f.getPaletteSize();
	set<Pixel, PixelCompare> uniquePixels;
	for(int i=0; i<width;i++) {
		for(int j=0; j<height;j++) {
			uniquePixels.insert(f.pixels(i,j));
		}
	}
	GifColorType* colourMap = new GifColorType[uniquePixels.size()];
	int i=0;
	for(set<Pixel,PixelCompare>::iterator it=uniquePixels.begin(); it!=uniquePixels.end(); ++it) {
		colourMap[i].Red=*(it->r);
		colourMap[i].Green=*(it->g);
		colourMap[i++].Blue=*(it->b);
	}
	return colourMap;
}

void cello::restrictPalette(Frame &f) {
	int currentSize=f.getPaletteSize();
	if(currentSize <= maxPaletteSize) { return; }

	for(int i=0; i<width;i++) {
		for(int j=0; j<height;j++) {
			PixCol r=*(f.pixels(i,j).r);
			PixCol g=*(f.pixels(i,j).g);
			PixCol b=*(f.pixels(i,j).b);
			*f.pixels(i,j).r=r-r%3;
			*f.pixels(i,j).g=g-g%3;
			*f.pixels(i,j).b=b-b%3;
		}
	}
}

Pixel::Pixel(PixCol *R, PixCol *G, PixCol *B) {
	r=R; g=G; b=B;
}

void Pixel::operator=(PixCol grey) { *r=grey; *g=grey; *b=grey;}
void Pixel::operator()(PixCol grey) { *r=grey; *g=grey; *b=grey;}

bool PixelCompare::operator()(const Pixel& lhs, const Pixel& rhs) {
	if(*(lhs.r) < *(rhs.r)) { return true; }
	else if(*(lhs.r) > *(rhs.r)) { return false; }

	if(*(lhs.g) < *(rhs.g)) { return true; }
	else if(*(lhs.g) > *(rhs.g)) { return false; }

	if(*(lhs.b) < *(rhs.b)) { return true; }
	else if(*(lhs.b) > *(rhs.b)) { return false; }

	return false;
}

Pixel Frame::pixels(int x, int y) {
	int pos=3*y*width+3*x;
	return Pixel(&(pixelArray[pos]), &(pixelArray[pos+1]), &(pixelArray[pos+2]));
}

Frame::Frame() {
	width=cello::width;
	height=cello::height;
	originX=0; originY=0;
	translateX=0.0; translateY=0.0; scaleX=1.0; scaleY=1.0f; rotate=1.0f;
	pixelArray=new PixCol[width*height*3]();
	for(int i=0; i<height*width*3;i++) {
		pixelArray[i]=i;
	}
}

int Frame::getPaletteSize() {
	set<Pixel, PixelCompare> uniquePixels;
	for(int i=0; i<width;i++) {
		for(int j=0; j<height;j++) {
			uniquePixels.insert(pixels(i,j));
		}
	}
	return uniquePixels.size();
}


